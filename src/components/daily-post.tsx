/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/vFEf4jTDjBy
 */
import {
  CardTitle,
  CardDescription,
  CardHeader,
  CardContent,
  CardFooter,
  Card,
} from "src/components/ui/card";
import { Button } from "src/components/ui/button";
import { AvatarImage, AvatarFallback, Avatar } from "src/components/ui/avatar";
import { BlogComment, Dashboard } from "@/interface/blog.interface";
import Image from "next/image";
import Link from "next/link";
import { formatDate } from "@/lib/utils";

type IProps = {
  key: React.Key;
  post: Dashboard["dailyPost"][0];
};

export function DailyPost({ key, post }: IProps) {
  return (
    <main
      key={key}
      className="flex flex-col items-center justify-center w-full py-2">
      <Link href={`/proverb/${post.slug}`}>
        <Card className="w-full max-w-xl hover:bg-neutral-100/50 dark:hover:bg-neutral-800/50 transition-colors duration-300">
          {/* 상단 */}
          <CardHeader className="p-3 xs:p-4 xs:pb-0 pb-0">
            <CardTitle className="text-2xl font-bold font-skybori">
              {post.titleKo}
            </CardTitle>
            <CardDescription className="text-sm text-gray-500 dark:text-gray-400">
              By Author {post.writer} | {formatDate(post.publishedAt)}
            </CardDescription>
          </CardHeader>
          {/* 본문 */}
          <CardContent className="text-sm leading-relaxed p-3 xs:p-4">
            <Image
              src={post.thumbnailUrl}
              width={360}
              height={360}
              alt={post.thumbnailAlt}
              className="rounded-md"
            />
            <p className="pt-2 font-skybori">{post.description}</p>
          </CardContent>
          {/* 하단 */}
          <CardFooter className="flex justify-between items-center p-3 xs:p-4">
            <div className="flex items-center gap-2">
              <Button size="icon" variant="ghost">
                <TextIcon className="w-5 h-5" />
              </Button>
              <span className="text-xs">12 Comments</span>
            </div>
            <Button size="icon" variant="ghost">
              <ShareIcon className="w-5 h-5" />
            </Button>
          </CardFooter>
        </Card>
      </Link>

      {/* 댓글란 */}
      {post.commentList.length > 0 && (
        <div className="w-full max-w-xl mt-4">
          <h2 className="text-lg font-semibold">Comments</h2>
          <div className="mt-2 space-y-4">
            {post.commentList.map((comment) => (
              <Comment key={comment.commentNo} comment={comment} />
            ))}
          </div>
        </div>
      )}
    </main>
  );
}

function Comment({ key, comment }: { key: React.Key; comment: BlogComment }) {
  return (
    <div key={key} className="flex items-start gap-4">
      <Avatar className="w-10 h-10 border">
        <AvatarImage alt="@shadcn" src="/placeholder-user.jpg" />
        <AvatarFallback>AC</AvatarFallback>
      </Avatar>
      <div className="grid gap-1">
        <div className="flex items-center gap-2">
          <div className="font-semibold">
            <span className="font-skybori font-light">@</span>
            {comment.id}
          </div>
          <div className="text-xs text-gray-500 dark:text-gray-400">
            {formatDate(comment.createdAt)}
          </div>
        </div>
        <p className="font-skybori">{comment.comment}</p>
      </div>
    </div>
  );
}

function TextIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M17 6.1H3" />
      <path d="M21 12.1H3" />
      <path d="M15.1 18H3" />
    </svg>
  );
}

function ShareIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M4 12v8a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2v-8" />
      <polyline points="16 6 12 2 8 6" />
      <line x1="12" x2="12" y1="2" y2="15" />
    </svg>
  );
}
